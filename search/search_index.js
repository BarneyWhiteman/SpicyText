var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"SpicyText","text":"<p>A simple text effect library for Processing.</p> <p>Use the built-in <code>[COLOUR=...]</code>, <code>[BACKGROUND=...]</code> and <code>[EFFECT=...]</code> tags to quickly style and animate your text. Stacking tags lets you get truly creative, and if that's not enough you can also supply your own CUSTOM effects!</p> <p>This is an open source library, so check out the code on GitHub at https://github.com/BarneyWhiteman/SpicyText if you're interested!</p> <p></p> <p>This documentation provides information on</p> <ol> <li>Getting started</li> <li>Examples</li> <li>Using Custom Themes</li> <li>Creating Custom Effects</li> </ol>"},{"location":"custom-effects.html","title":"Releasing your library","text":"<p>You've written your library, created examples, and tested it in Processing. Now you are ready to release  and publish it.</p>"},{"location":"custom-effects.html#creating-your-documentation-website","title":"Creating your Documentation Website","text":"<p>To have your library listed on the Processing website and Contribution Manager, you need to create a  documentation website and host it at a stable URL. This library template includes a built-in way to create and publish a website for your library using Material for Mkdocs and Github Pages.</p>"},{"location":"custom-effects.html#configuring-your-documentation-website","title":"Configuring Your Documentation Website","text":"<p>Customize your website by updating the <code>mkdocs.yml</code> file. We have included some plugins, such as search, code block copy and annotations, and navigation bars. The navigation menu is configured in <code>mkdocs.yml</code> as well.</p> <p>To write your documentation, edit the Markdown files located in the <code>docs</code> folder. You can add new pages by creating additional Markdown files in the same folder, then add them to the menu in the <code>nav</code> section of the <code>mkdocs.yml</code> file.</p> <p>For examples of how Processing libraries use Material for MkDocs, see EasyEase or FIP</p>"},{"location":"custom-effects.html#deploying-your-documentation-on-github-pages","title":"Deploying your Documentation on Github Pages","text":"<p>This template include a workflow that automatically deploys your documentaion website to GitHub Pages. Here is how you can set this up for your repository:</p> <ol> <li>Enable GitHub Pages and GitHub Actions in your repository settings: Under Settings &gt; GitHub Pages, set the source to \"Deploy from a branch\", choose the <code>gh-pages</code> branch, select the <code>/(root)</code> folder, and then click Save.</li> <li>Wait for the workflow to complete (this can take a few minutes). Once finished, your site\u2019s URL will be displayed with the message \"Your site is live at {{URL}}.\"</li> <li>Add your website URL to the <code>url</code> property in the <code>release.properties</code> file.</li> </ol> <p>Any time you want to update the documentation, edit your <code>.md</code> files and <code>mkdocs.yml</code> as needed, then push your changes to <code>main</code>. This will trigger the workflow to deploy an update.</p> <p>Note</p> <p>You can find the workflow file at <code>.github/workflows/deploy_website.yml</code>.</p>"},{"location":"custom-effects.html#alternative-hosting-and-static-site-generators","title":"Alternative Hosting and Static Site Generators","text":"<p>If you prefer not to use the built-in workflow with GitHub Pages and Material for MkDocs, you are free to use another static site generator or hosting service. Note that it\u2019s important that the site remains online, as it serves as a reference for users of your library. </p>"},{"location":"custom-effects.html#releasing-on-github","title":"Releasing on Github","text":"<p>Releasing your library on GitHub  allows users to access known-working versions of your library. Unlike the repository itself, which may contain ongoing development or experimental features, releases provide specific versions of your library that are ready for use. Here is how you can make a new release using this template:</p> <ol> <li>In your repository, click on Releases.</li> <li>Click Draft a new release to start.</li> <li>Click on Choose a tag and type a tag starting with \"v\" (e.g., <code>v1.0.0</code>). </li> <li>Select the branch you want to use for this release (e.g., <code>main</code>).</li> <li>Add a title and description for the release, highlighting key updates or changes.</li> <li>Click on Publish release. </li> </ol> <p>This will trigger the GitHub workflow (<code>.github/workflows/release.yml</code>), which automatically create release artifacts\u2014<code>*.txt</code>, <code>*.zip</code>, <code>*.pdex</code> files\u2014and add them to the release.</p> <p>Important</p> <p>The release workflow will only trigger if the release tag starts with <code>v</code>.</p> <p>Important</p> <p>The release tag created on Github will be propagated to the release artifacts. Specifically the tag, without the leading <code>v</code>, will be used for the <code>prettyVersion</code> in the txt file and <code>library.properties</code> file in the zip. This overwrites the value input for <code>prettyVersion</code> in the <code>release.properties</code> file.</p> <p>Note</p> <p>By default, GitHub will also include compressed versions of your source code (e.g., <code>Source code (zip)</code> and <code>Source code (tar.gz)</code>).</p> <p>For more details on releases, see GitHub\u2019s official guide on releasing projects.</p>"},{"location":"custom-effects.html#publish-your-library-to-the-contribution-manager","title":"Publish your Library to the Contribution Manager","text":"<p>Once you are ready to add your contribution to the Contribution Manager, submit your contribution to the processing-contributions repository using our  issue form You will need the url to your releases page.  It should look something like <code>https://github.com/{{username}}/{{repository}}/releases/</code>.  A Processing maintainer will review and publish your contribution. You may be asked for more information about your contribution or some modifications if needed.</p>"},{"location":"custom-themes.html","title":"The Development Process","text":"<p>You are now ready to develop your library. This guide will walk you through resolving dependencies, configuring the build, creating release artifacts, and testing your library in Processing.</p> <p>Note</p> <p>If you haven't set up your environment yet, refer to the Getting Started guide.</p>"},{"location":"custom-themes.html#developing-the-library","title":"Developing the library","text":"<p>Develop your library within <code>src/main/java/</code>. Set the <code>package</code> at the top of your file to your own group id and library name, all together. For instance, in the example library, the group id is <code>com.myDomain</code> and the library name is <code>myLibrary</code>. The package is then <code>com.myDomain.myLibrary</code>. These values will need to match the values input into your Gradle build file, <code>build.gradle.kts</code>. More on this in Configuring the Gradle build file.</p> <p>Intellij and Visual Studio Code will then direct you to move your code into nested folders, consistent with your package name. For instance, if the package is <code>com.myDomain.myLibrary</code>, the code will be in the folder structure <code>src/main/java/com/myDomain/myLibrary/</code>.</p> <p>If you would like to use Processing functionality in your library, you can do so by importing Processing core and referencing Processing objects from the PApplet instance. An example of how to do this is given in the example library in this template.</p>"},{"location":"custom-themes.html#resolving-dependencies","title":"Resolving dependencies","text":"<p>In the <code>build.gradle.kts</code> file, there are a few places you should edit, to input your own values. The part of the file that you are invited to edit is indicated by the comment  <code>USER BUILD CONFIGURATIONS</code>. We cover here how to add dependencies for your library. The relevant sections of the <code>build.gradle.kts</code> file are the <code>repositories</code> and <code>dependencies</code> sections.</p> <p>The locations where dependencies will be resolved from are the <code>repositories</code>. Most dependencies can be resolved from Maven. You can add additional repositories here if your dependencies are hosted elsewhere. </p> <p>Your dependencies should be listed within <code>dependencies</code>. For example, if the example library were to use the <code>commons-math3</code> package from <code>org.apache.commons</code> as a dependency, it would be listed within <code>dependencies</code> with the following structure:</p> <pre><code>implementation(group = \"org.apache.commons\", name = \"commons-math3\", version = \"3.6.1\")\n</code></pre> <p>Note</p> <p>Dependencies added with <code>implementation</code> will be included in the release. Dependencies added with <code>compileOnly</code>, such as Processing core, are available for compilation, but won't be included in the release.</p> <p>After you add these dependencies, refresh Gradle, and then you will be able to access them in your code. Refresh Gradle by going to the Gradle menu (elephant) in your IDE and click on the refresh icon, which is two arrows pointing at each other's ends in a circle.</p>"},{"location":"custom-themes.html#configuring-the-gradle-build-file","title":"Configuring the Gradle build file","text":"<p>In the <code>build.gradle.kts</code> file, there are a few places you should edit, to input your own values. The section that you are invited to edit is indicated by the comment <code>USER BUILD CONFIGURATIONS</code>. We cover here how to configure the editable sections of the <code>build.gradle.kts</code> file, aside from those sections for resolving dependencies.</p> <ol> <li>Edit the variable <code>libName</code> to contain the name of your library. The name can only contain     lower case alphanumeric characters, and \"-\".      This value is used by Gradle to name the built jar file, and the zip file holding     your release artifacts. If this name does not match the name of the library in your code,      as discussed in the section Developing the library,     Processing will not find your library.</li> <li>Edit the variable <code>group</code> with your own domain or organization name. The group id      of your library uniquely identifies your project. It's often written in reverse domain name      notation. For example, if your website is \"myDomain.com\", your group ID would be      \"com.myDomain\". This group id should match the group id discussed in      section Developing the library.</li> <li> <p>The <code>sketchbookLocation</code> is determined programmatically by your operation system, and is     where your Processing <code>sketchbook</code> folder is. This folder contains your installed libraries.     It is needed if you:</p> <ol> <li>wish to copy the library to the Processing sketchbook, which installs the library locally</li> <li>have Processing library dependencies</li> </ol> <p>This variable is in the editable section, in case the location determined is incorrect. A symptom of an incorrect <code>sketchbookLocation</code> is that your library does not show up as a contributed library Processing, after being installed. Please look at our troubleshooting guide if you suspect this is the case.</p> </li> </ol>"},{"location":"custom-themes.html#creating-examples","title":"Creating examples","text":"<p>Examples help users understand your library\u2019s functionality, it is recommended that you include several clear and well-commented samples sketches in the <code>examples</code> folder.</p> <p>Note</p> <p>The example sketch included in this template outputs the image shown on the home page.</p>"},{"location":"custom-themes.html#creating-the-release-artifacts","title":"Creating the release artifacts","text":"<ol> <li>Fill in the file <code>release.properties</code> with information for your library. In the file itself,     There are comments to guide you. This information will be used by Gradle to create the      <code>library.properties</code> file, which is one of the required release artifacts, used by the website      and Contribution Manager to describe your library. To create just the <code>library.properties</code> file without building the     library, toggle <code>Tasks</code> &gt; <code>processing</code> and double click <code>writeLibraryProperties</code>. This task will     copy all the values in <code>release.properties</code>.</li> <li>To build the library and create the release artifacts, run the Gradle task <code>buildReleaseArtifacts</code>.     This task will create a <code>release</code> folder with needed artifacts. To do this, go to the Gradle menu      (elephant), toggle <code>Tasks</code> &gt; <code>processing</code> and double click <code>buildReleaseArtifacts</code>. This task      has bundled the following required tasks:<ol> <li><code>build</code> task: this bundles a number of build tasks, including the <code>jar</code> task which creates a     jar file. all build artifacts are in the folder <code>build</code>.</li> <li>documentation build.</li> <li>creation of the <code>library.properties</code> file: this file is built from the properties set in the    <code>release.properties</code> file, plus the version, in the task <code>writeLibraryProperties</code>.</li> <li>within the <code>buildReleaseArtifacts</code> task, the <code>release</code> folder is created, jars of the library and     dependencies are copied, and the <code>library.properties</code> file is copied. Also, a zip file is made.</li> </ol> </li> <li>When you would like to test your library in Processing, toggle <code>Tasks</code> &gt; <code>processing</code> and double click     <code>deployToProcessingSketchbook</code>, which will create the release artifacts, and copy them into the      sketchbook folder.</li> </ol> <p>Note</p> <p>If you release your library on Github, your release tag will be used for the value of the <code>prettyVersion</code> field, overwriting the value for <code>prettyVersion</code>  defined in <code>release.properties</code>, as a helpful automation.</p>"},{"location":"custom-themes.html#additional-documentation","title":"Additional Documentation","text":"<p>See the following guides for more details:</p> <ul> <li>Library Overview: an introduction to Processing libraries in general.</li> <li>Library Basics: a basic guide for creating a Processing library from scratch, including structuring the library, registering methods with PApplet, handling events, and preparing the library for distribution.</li> <li>Library Guidelines: describes the requirements for a Processing library, including naming conventions, examples, and other best practices.</li> </ul>"},{"location":"getting-started.html","title":"Getting Started","text":"<p>SpicyText is a very simple to use library to quickly add some...spice to your text in Processing.</p> <p>This is done by adding simple tags to your strings that determine the text colour, background colour, and any effects that will be applied when displaying your text!</p>"},{"location":"getting-started.html#installation","title":"Installation","text":"<p>Using the Processing IDE Contribution Manager: 1.  Open Processing 2.  Import the library:     * In the menus at the top of the Processing IDE, navigate to <code>Sketch</code> &gt; <code>Import Library...</code> &gt;  click on <code>Manage Libraries...</code> to open the \"Contribution Manager\" window and search for \"SpicyText\"     * In the bottom right, click \"Install\"</p> <p>Installing manually: 1. Go to the Releases page on the GitHub and download the latest <code>.zip</code> file 2. Navigate to your Sketchbook folder    * To find out where this is, in the Processing IDE, navigate to <code>File</code> &gt; click on <code>Preferences</code>    * The first item should be show <code>Sketchbook folder</code> file path 3. Extract the <code>.zip</code> into the <code>libraries</code> folder inside the Sketchbook folder.</p>"},{"location":"getting-started.html#hello-world","title":"Hello World!","text":"<p>Now that library is installed, let's start styling some text!</p> <ol> <li>Open Processing (if it's not already open..!)</li> <li>Import the library: <ul> <li>In the menus at the top of the Processing IDE, navigate to <code>Sketch</code> &gt; <code>Import Library...</code>.</li> <li>You should see an entry called \"SpicyText\" under <code>Contributed</code> heading. Click on \"SpicyText\".</li> <li>This will insert the text <code>import com.barneycodes.spicytext.*;</code> at the top of your sketch, letting you use the SpicyText library!</li> </ul> </li> <li>Use Spicy Text: <pre><code>import com.barneycodes.spicytext.*;\n\n// Declare a SpicyText object\nSpicyText mySpicyText;\n\n// Define a string with some tags to add some spice!\nString styledText = \"This is some [COLOUR=#FFFF0000][EFFECT=BOUNCE]SPICY[END_EFFECT][END_COLOUR] [BACKGROUND=255]text![END_BACKGROUND]\";\n\nvoid setup() {\n    size(1280, 720);\n\n    // Initialise the Spicy text.\n    // It needs a reference to the sketch (this), the text, and a text size (in this case 80).\n    mySpicyText = new SpicyText(this, styledText, 80);\n}\n\nvoid draw() {\n    background(200);\n\n    // Display the text at the given x, y location.\n    // You choose how the text is aligned horizontally and vertically.\n    // If alignment is omitted, the text will be displayed aligned to the LEFT (horizontally) and TOP (vertically).\n    mySpicyText.draw(width/2, height/2, CENTER, CENTER);\n}\n</code></pre></li> </ol>"},{"location":"getting-started.html#tags","title":"Tags","text":"<p>You'll notice that the <code>styledText</code> has some square brackets (<code>[]</code>) in it, containing various text. These are \"tags\"  that let the Spicy Text know how you want the text to be styled.</p> <p>There are currently 3 tag types: 1. <code>[COLOUR=...]</code> for changing the TEXT colour 2. <code>[BACKGROUND=...]</code> for changing the BACKGROUND colour 3. <code>[EFFECT=...]</code> for using an effect</p> <p>Each tag has a corresponding end tag (<code>[END_COLOUR]</code>, <code>[END_BACKGROUND]</code>, and <code>[END_EFFECT]</code>) that let the Spicy Text  know when you want the previous colour/background/effect to end. If there is no end tag, for a given colour/background/effect,  then it will extend until the end of the string.</p> <p>Note</p> <p>Any value inside square brackets in the input string will be omitted when being displayed. Malformed/invalid tags will have no visible impact on the displayed text.</p>"},{"location":"getting-started.html#colour-tags","title":"Colour Tags","text":"<p>Colour tags are used to change the TEXT colour for all characters in between the opening (i.e. <code>[COLOUR=...]</code>) and closing (i.e. <code>[END_COLOUR]</code>) tags.</p> <p>You must specify a colour after the <code>=</code> inside the tag. This can take 3 different forms:</p> <ol> <li>A simple integer (e.g. <code>[COLOUR=255]</code>)</li> <li>A hexadecimal integer using the <code>0x</code> format (e.g. <code>[COLOUR=0xFFFFFFFF]</code>)</li> <li>A hexadecimal integer using the <code>#</code> format (e.g. <code>[COLOUR=#FFFFFFFF]</code>)</li> </ol> <p>All of the above examples produce white text.</p> <p>Note</p> <p>Processing uses the <code>ARGB</code> colour format, so when specifying a colour with hexadecimal, use 8 characters. If you only use 6 characters (to represent <code>RGB</code>), the alpha will be set to 0, meaning your text will be invisible! To get around this, simply add <code>FF</code> to the start of your number (e.g. <code>0x00FF00</code> -&gt; <code>0xFF00FF00</code> for green) to set the alpha to 100%. Of course, you can play with this for transparent text too!</p>"},{"location":"getting-started.html#background-tags","title":"Background Tags","text":"<p>Background tags are used to change the BACKGROUND colour for all characters in between the opening (i.e. <code>[BACKGROUND=...]</code>) and closing (i.e. <code>[END_BACKGROUND]</code>) tags.</p> <p>Just like the <code>[COLOUR=...]</code> tags, you must specify a colour after the <code>=</code> inside the tag. All the rules for <code>[COLOUR=...]</code> tags also apply for <code>[BACKGROUND=...]</code> tags.  </p>"},{"location":"getting-started.html#effect-tags","title":"Effect Tags","text":"<p>Effect tags are used to apply animations and other programmatic effects to all the characters in between the opening (i.e. <code>[EFFECT=...]</code>) and closing (i.e. <code>[END_EFFECT]</code>) tags.</p> <p>You must specify the desired effect after the <code>=</code> inside the tag. There are currently 3 in-built effects:</p> <ol> <li><code>[EFFECT=BOUNCE]</code> to make text bounce</li> <li><code>[EFFECT=WAVE]</code> to make text wave</li> <li><code>[EFFECT=JIGGLE]</code> to make text...that's right, jiggle</li> </ol> <p>If you want something more specific, take a look at the Creating Custom Effects page!</p>"},{"location":"getting-started.html#nestingcombining-tags","title":"Nesting/Combining Tags","text":"<p>Characters can be influenced by multiple different tags at the same time.</p> <p>Colours/backgrounds/effects are stored internally in a stack, so an <code>[END_...]</code> tag will simply pop the most recently set colour/background/effect off the stack.</p> <p>Colour and background tags:</p> <p>In the case of <code>[COLOUR=...]</code> and <code>[BACKGROUND=...]</code> tags, characters will use the most recently set colour. When an <code>[END_COLOUR]</code> or <code>[END_BACKGROUND]</code> tag is found, it will pop the last colour/background from the stack so all following characters will use the previously set colour/background.</p> <p>If the stack is already empty, the text will use the colour set in the theme (see Using Custom Themes for more information), and no background will be displayed.</p> <p>Try this:</p> <p><code>\"Default colour [COLOUR=#FFFF0000]RED [COLOUR=#FF00FF00]GREEN![END_COLOUR] RED again[END_COLOUR] back to default\"</code></p> <p>Effect tags:</p> <p>If a character is inside multiple <code>[EFFECT=...]</code> tags, the character will be influenced by ALL of the effects in the stack (as long as any custom effects have been written \"correctly\" to not write over the output of other effects...).</p> <p>Try this:</p> <p><code>\"No effect [EFFECT=WAVE]WAVING [EFFECT=JIGGLE]WAVING AND JIGGLING[END_EFFECT] WAVING again[END_EFFECT] back to normal\"</code></p> <p>Altogether now!</p> <p>Character backgrounds are drawn relative to the final position of the character (after effects are applied), so moving text will also move the backgrounds.</p> <p>Try this:</p> <p><code>\"Normal [EFFECT=WAVE]WAVING [BACKGROUND=#FFFF0000]WAVING AND RED BACKGROUND[END_BACKGROUND] just waving[END_EFFECT] and back to normal\"</code></p>"},{"location":"getting-started.html#next-steps","title":"Next Steps","text":"<p>Now you've got a little bit of an idea what's going on, you can explore the examples for some more advanced usage.</p> <p>You may also want to check out the following pages for more in-depth guides on customisation: 1. Using Custom Themes 2. Creating Custom Effects</p>"}]}