{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"SpicyText","text":"<p>A simple text effect library for Processing.</p> <p>Use the built-in <code>[COLOUR=...]</code>, <code>[BACKGROUND=...]</code> and <code>[EFFECT=...]</code> tags to quickly style and animate your text. Stacking tags lets you get truly creative, and if that's not enough you can also supply your own CUSTOM effects!</p> <p>This is an open source library, so check out the code on GitHub at https://github.com/BarneyWhiteman/SpicyText if you're interested!</p> <p> The above image is the SpicyText output for the following:</p> <p><code>\"This is some [COLOUR=#FFFF0000][EFFECT=WAVE]SPICY[END_EFFECT][END_COLOUR] [BACKGROUND=255]text![END_BACKGROUND]\"</code></p> <p>This documentation provides information on</p> <ol> <li>Getting started</li> <li>Examples</li> <li>Using Custom Themes</li> <li>Creating Custom Effects</li> </ol>"},{"location":"custom-effects.html","title":"Creating Custom Effects","text":"<p>I can't predict what you'll want your text to do. To get your text moving the way you want, you might need the help of some custom effects!</p> <p>Note</p> <p>Check out the example on custom effects! To find out how to access the examples, see Examples.</p>"},{"location":"custom-effects.html#getting-started","title":"Getting Started","text":""},{"location":"custom-effects.html#custom-effect-function","title":"Custom effect function","text":"<p>The first thing to do is create a custom effect function. This will take in a SpicyTextChar (which holds information about the character the effect is being applied to), and a  CharEffectParams object (which holds information about how the character will be displayed).</p> <pre><code>// A custom effect function that takes in a SpicyTextChar and the CharEffectParams \nvoid myCustomEffect(SpicyTextChar spicyChar, CharEffectParams effectParams) {\n    // your effect here\n}\n</code></pre> <p>You might notice that it's a void function, so how do the effects get applied? You simply modify the values in the CharEffectParams, as these are what are used to display a character.</p>"},{"location":"custom-effects.html#registering-the-effect","title":"Registering the effect","text":"<p>We'll get back to the CharEffectParams and the custom effect function in a moment, first let's see how to register the effect with the SpicyText library. This is done by simply calling the static <code>SpicyText.customEffect</code> function,  and passing in the name of the effect, and a reference to the custom effect function we just created:</p> <pre><code>SpicyText.customEffect(\"MY_EFFECT\", this::myCustomEffect);\n</code></pre> <p>Alternatively, the effect function can be made in-place: <pre><code>SpicyText.customEffect(\"MY_EFFECT\", (spicyChar, effectParams) -&gt; {\n    // your effect here    \n});\n</code></pre></p>"},{"location":"custom-effects.html#using-your-effect","title":"Using your effect","text":"<p>Now that the effect has been registered, we can use it in an <code>[EFFECT=...]</code> tag, in our case we would use <code>[EFFECT=MY_EFFECT]</code>. You must use whatever name you put in the <code>SpicyText.customEffect</code> function to reference your effect in the <code>[EFFECT=...]</code> tag. </p> <p>Note</p> <p>It is possible to replace effects by using an existing name when registering your effect. Use a unique name to avoid this!</p>"},{"location":"custom-effects.html#custom-effect-functions","title":"Custom Effect Functions","text":"<p>As promised, we'll return our attention to the Custom Effect Functions, since this is where the magic happens.</p> <p>First things first, let's take a look at what data we've got to work with.</p>"},{"location":"custom-effects.html#spicytextchar","title":"SpicyTextChar","text":"<p>The SpicyTextChar stores the raw information for a processed character of a SpicyText String. This information is used to populate the initial values of the CharEffectParams, which is in turn used for display.</p> <p>Here's a full list of the properties available on the SpicyTextChar object:</p> Property Description <code>char c</code> The literal character to be displayed. <code>int colour</code> The text colour to be used (the colour at the top of the stack if <code>[COLOUR=...]</code> tags have been used, otherwise the text colour set by the theme. <code>int background</code> The background colour to be used (the background colour at the top of the stack if <code>[BACKGROUND=...]</code> tags have been used, otherwise <code>-1</code> and no background will be displayed. <code>int width</code> The width of the character (in pixels) when displayed with the textSize and font described by the SpicyText object. <code>int height</code> The height of the character (in pixels) when displayed with the textSize and font described by the SpicyText object. <code>int index</code> The index of the character in the entire displayed text of the SpicyText."},{"location":"custom-effects.html#chareffectparams","title":"CharEffectParams","text":"<p>When a character is being displayed, a CharEffectParams object is initialised with values from the relevant SpicyTextChar and fed through all the effect functions that are being applied to the given character.</p> <p>The effect functions will manipulate the values in the CharEffectParams, and these values will then determine how the character is displayed.</p> <p>Here's a full list of the properties available on the SpicyTextChar object:</p> Property Description <code>int colour</code> The text colour to be used when displaying the character. <code>int background</code> The background colour to be used (if <code>-1</code>, no background will be displayed). <code>int time</code> The elapsed time of the sketch in milliseconds. This is useful for creating time-based animations. <code>float x</code> The x position (in pixels) of the character, relative to the left-most character. <code>float y</code> The y position (in pixels) of the character, relative to the top-most character. <code>float rotation</code> The rotation (in radians) of the character."},{"location":"custom-effects.html#example-use","title":"Example Use","text":"<p>To see how these are used, let's take a look at the built-in <code>WAVE</code> effect function:</p> <pre><code>// Wave Effect function\nvoid waveEffect(SpicyTextChar c, CharEffectParams params) {\n    // Calculate a sin wave value, using the character's index and the animation time\n    float off = PApplet.sin(c.index - params.time / 500f);\n\n    // Change the y position using the animated value\n    params.y -= off * c.height/4;\n}\n</code></pre> <p>As you can see, it's actually quite simple! All we're doing is shifting the character's <code>y</code> position slightly up and down.</p> <ul> <li>By using the sin function, we're calculating a value that changes smoothly over time (this is important for make nice animations!).</li> <li>By including <code>c.index</code> (not just <code>params.time</code>!), we're able to offset the animation slightly for each character, meaning we get a wave, instead of each character moving up and down at the same time.</li> <li>You'll notice that we MODIFY the <code>y</code> position rather than SET it (using <code>-=</code> not <code>=</code>). This is because the <code>params</code> object is shared for all effects on a given character. If we were to set the value, we'd be losing all the work done by effects that came before this one. By modifying it instead, we can have multiple effects all combining to produce results!</li> </ul>"},{"location":"custom-effects.html#now-its-your-turn","title":"Now it's your turn!","text":"<p>Hopefully you've got a better understanding of how to write your own custom effect functions and register them with the SpicyText library!</p> <p>Now it's your turn to create some funky text effects to add some spice to your text!</p> <p>Again, check out the example on custom effects for a good place to get started! </p>"},{"location":"custom-themes.html","title":"Using Custom Themes","text":"<p>To get your text looking just right you probably want to try using a custom theme!</p> <p>This lets you change the defaults for how the SpicyText is displayed.</p> <p>Note</p> <p>Check out the example on custom themes! To find out how to access the examples, see Examples.</p>"},{"location":"custom-themes.html#getting-started","title":"Getting Started","text":"<p>The first thing to do is create a custom theme object:</p> <pre><code>SpicyTextTheme myTheme = new SpicyTextTheme(); // create a theme object\n</code></pre> <p>The <code>SpicyTextTheme</code> initialises with the default settings, so you don't have to change anything before you can use it.</p> <p>BUT the reason we're here is to change the default look, so let's do something nice and straightforward!</p> <pre><code>myTheme.textColour = color(255, 0, 255); // set the default text colour to magenta!\n</code></pre> <p>Once you've set up your theme, you can use it in the SpicyText constructor:</p> <pre><code>// Use the theme in the basic SpicyText constructor\nSpicyText mySpicyText = new SpicyText(this, \"This will be magenta\", textSize, myTheme);\n\n// There's also a constructor that takes a max width AND a custom theme\nSpicyText wrappedText = new SpicyText(this, \"Wrapped Text\", textSize, maxWidth, myTheme);\n</code></pre>"},{"location":"custom-themes.html#properties","title":"Properties","text":"<p>Of course, you can use the <code>SpicyTextTheme</code> object to change MORE than just the text colour!</p> <p>Here's a full list of the properties:</p> Property Description Default Value <code>textColour</code> The default text colour, used when no <code>[COLOUR=...]</code> tags have been used OR all colours have been cleared with <code>[END_COLOUR]</code> tags. <code>0</code> - black <code>font</code> The font to be used for the SpicyText. This can be from one of the fonts installed on your computer using createFont or loaded from a file using loadFont. <code>null</code> - uses default Processing Sketch font <code>dropShadowOffset</code> The distance (in pixels) to offset the drop shadow. Positive values move the drop shadow towards the bottom right. A value of 0 will not produce any drop shadow. <code>2</code> <code>shadowOpacity</code> The opacity of the drop shadow text. A value of <code>0</code> will make the shadow fully transparent, while a value of <code>1</code> will make it fully opaque. <code>0.5</code> <code>textBackgroundMargin</code> The distance (in pixels) to extend a characters background past it's border. Larger values will create a bigger background. <code>4</code> <code>cornerRadius</code> The radius of the corners of the background rectangle. A value of <code>0</code> will have sharp corners. Larger values produce more rounded corners. <code>4</code> <code>newLineMargin</code> The distance (in pixels) to be left in between lines of the SpicyText (measured from the bottom of the previous line to the top of the new line). In practice the gap can be larger than the provided value, since the \"bottom\" is the bottom of hanging letters (e.g. <code>p</code>) and the \"top\" is the top of tall letters (e.g. <code>d</code>). <code>4</code>"},{"location":"custom-themes.html#gotchas","title":"Gotchas","text":"<p>In most cases, you'll probably create a theme, set up the values, and then pass it into the constructor of one or many SpicyText objects.</p> <p>If you change the values of the theme AFTER a SpicyText object has been made using it, some unexpected behaviour can occur (unless you call <code>setText</code> after changing the theme).</p> <p>Note</p> <p>Calling <code>setText(String newText);</code> will re-processes the layout IF the text being set is DIFFERENT from its original text. You can force the update by calling <code>setText(String newText, int maxWidth);</code> with a <code>maxWidth</code> value (use <code>-1</code> in the case that you don't want any text wrapping).  </p> <p>This is because the SpicyText object processes the layout of the text when it's initialised (not every frame), but is obviously still drawn every frame. Therefore, any theme values used ONLY for display can be changed without calling <code>setText</code>, but those that impact the layout (namely <code>font</code> and <code>newLineMargin</code>) will require calling <code>setText</code> before any changes will be visible.</p>"},{"location":"examples.html","title":"Examples","text":"<p>The library contains 5 examples of increasing complexity that show most of what the library has to offer.</p> <p>It's recommended that you read through the Getting Started page before exploring the examples. This will walk you through installing the library, show you a trivial example, and explain a bit more about how the library works.</p>"},{"location":"examples.html#access-the-examples","title":"Access the examples","text":"<p>The examples can either be accessed via the Processing IDE or viewed on the GitHub page</p> <p>Note</p> <p>I haven't included the example code here simply because I want to minimise the places I have to maintain them. What IS included in this page is a high-level explanation of what each example contains. The comments in the example should be sufficient to explain what's going on. If you have any questions, please just reach out!</p> <p>To access via the Processing IDE: 1. Navigate to <code>File</code> &gt; click on <code>Examples...</code> to open the <code>Java Examples</code> window. 2. Expand the <code>Contributed Libraries</code> category 3. Expand the <code>SpicyText</code> sub-category 4. Double-click the desired example to open it in the Processing IDE</p>"},{"location":"examples.html#example-1-hello-world","title":"Example 1: Hello World","text":"<p>Goes over the basic usage of the library: * Tag basics * Simple text wrapping * Displaying Spicy Text with alignment</p>"},{"location":"examples.html#example-2-dynamic-text","title":"Example 2: Dynamic Text","text":"<p>Covers some slightly more advanced usage * Using <code>setText</code> to update text * Using <code>setText</code> to update the text wrapping width * Using <code>width()</code> and <code>height()</code> to get the bounding box of the SpicyText</p>"},{"location":"examples.html#example-3-custom-theme","title":"Example 3: Custom Theme","text":"<p>Covers the basics of creating and using a custom theme. </p> <p>Check out Using Custom Themes for more detailed information.</p>"},{"location":"examples.html#example-4-custom-effects","title":"Example 4: Custom Effects","text":"<p>Covers the basics of creating and using custom effects.</p> <p>Check out Creating Custom Effects for more detailed information.</p>"},{"location":"examples.html#example-5-graphics-target","title":"Example 5: Graphics Target","text":"<p>Shows how to draw SpicyText to a different <code>PGraphics</code> object. </p>"},{"location":"getting-started.html","title":"Getting Started","text":"<p>SpicyText is a very simple to use library to quickly add some...spice to your text in Processing.</p> <p>This is done by adding simple tags to your strings that determine the text colour, background colour, and any effects that will be applied when displaying your text!</p>"},{"location":"getting-started.html#installation","title":"Installation","text":"<p>Using the Processing IDE Contribution Manager: 1.  Open Processing 2.  Import the library:     * In the menus at the top of the Processing IDE, navigate to <code>Sketch</code> &gt; <code>Import Library...</code> &gt;  click on <code>Manage Libraries...</code> to open the \"Contribution Manager\" window and search for \"SpicyText\"     * In the bottom right, click \"Install\"</p> <p>Installing manually: 1. Go to the Releases page on the GitHub and download the latest <code>.zip</code> file 2. Navigate to your Sketchbook folder    * To find out where this is, in the Processing IDE, navigate to <code>File</code> &gt; click on <code>Preferences</code>    * The first item should be show <code>Sketchbook folder</code> file path 3. Extract the <code>.zip</code> into the <code>libraries</code> folder inside the Sketchbook folder.</p>"},{"location":"getting-started.html#hello-world","title":"Hello World!","text":"<p>Now that library is installed, let's start styling some text!</p> <ol> <li>Open Processing (if it's not already open..!)</li> <li>Import the library: <ul> <li>In the menus at the top of the Processing IDE, navigate to <code>Sketch</code> &gt; <code>Import Library...</code>.</li> <li>You should see an entry called \"SpicyText\" under <code>Contributed</code> heading. Click on \"SpicyText\".</li> <li>This will insert the text <code>import com.barneycodes.spicytext.*;</code> at the top of your sketch, letting you use the SpicyText library!</li> </ul> </li> <li>Use Spicy Text: <pre><code>import com.barneycodes.spicytext.*;\n\n// Declare a SpicyText object\nSpicyText mySpicyText;\n\n// Define a string with some tags to add some spice!\nString styledText = \"This is some [COLOUR=#FFFF0000][EFFECT=BOUNCE]SPICY[END_EFFECT][END_COLOUR] [BACKGROUND=255]text![END_BACKGROUND]\";\n\nvoid setup() {\n    size(1280, 720);\n\n    // Initialise the Spicy text.\n    // It needs a reference to the sketch (this), the text, and a text size (in this case 80).\n    mySpicyText = new SpicyText(this, styledText, 80);\n}\n\nvoid draw() {\n    background(200);\n\n    // Display the text at the given x, y location.\n    // You choose how the text is aligned horizontally and vertically.\n    // If alignment is omitted, the text will be displayed aligned to the LEFT (horizontally) and TOP (vertically).\n    mySpicyText.draw(width/2, height/2, CENTER, CENTER);\n}\n</code></pre></li> </ol>"},{"location":"getting-started.html#tags","title":"Tags","text":"<p>You'll notice that the <code>styledText</code> has some square brackets (<code>[]</code>) in it, containing various text. These are \"tags\"  that let the Spicy Text know how you want the text to be styled.</p> <p>There are currently 3 tag types: 1. <code>[COLOUR=...]</code> for changing the TEXT colour 2. <code>[BACKGROUND=...]</code> for changing the BACKGROUND colour 3. <code>[EFFECT=...]</code> for using an effect</p> <p>Each tag has a corresponding end tag (<code>[END_COLOUR]</code>, <code>[END_BACKGROUND]</code>, and <code>[END_EFFECT]</code>) that let the Spicy Text  know when you want the previous colour/background/effect to end. If there is no end tag, for a given colour/background/effect,  then it will extend until the end of the string.</p> <p>Note</p> <p>Any value inside square brackets in the input string will be omitted when being displayed. Malformed/invalid tags will have no visible impact on the displayed text.</p>"},{"location":"getting-started.html#colour-tags","title":"Colour Tags","text":"<p>Colour tags are used to change the TEXT colour for all characters in between the opening (i.e. <code>[COLOUR=...]</code>) and closing (i.e. <code>[END_COLOUR]</code>) tags.</p> <p>You must specify a colour after the <code>=</code> inside the tag. This can take 3 different forms:</p> <ol> <li>A simple integer (e.g. <code>[COLOUR=255]</code>)</li> <li>A hexadecimal integer using the <code>0x</code> format (e.g. <code>[COLOUR=0xFFFFFFFF]</code>)</li> <li>A hexadecimal integer using the <code>#</code> format (e.g. <code>[COLOUR=#FFFFFFFF]</code>)</li> </ol> <p>All of the above examples produce white text.</p> <p>Note</p> <p>Processing uses the <code>ARGB</code> colour format, so when specifying a colour with hexadecimal, use 8 characters. If you only use 6 characters (to represent <code>RGB</code>), the alpha will be set to 0, meaning your text will be invisible! To get around this, simply add <code>FF</code> to the start of your number (e.g. <code>0x00FF00</code> -&gt; <code>0xFF00FF00</code> for green) to set the alpha to 100%. Of course, you can play with this for transparent text too!</p>"},{"location":"getting-started.html#background-tags","title":"Background Tags","text":"<p>Background tags are used to change the BACKGROUND colour for all characters in between the opening (i.e. <code>[BACKGROUND=...]</code>) and closing (i.e. <code>[END_BACKGROUND]</code>) tags.</p> <p>Just like the <code>[COLOUR=...]</code> tags, you must specify a colour after the <code>=</code> inside the tag. All the rules for <code>[COLOUR=...]</code> tags also apply for <code>[BACKGROUND=...]</code> tags.  </p>"},{"location":"getting-started.html#effect-tags","title":"Effect Tags","text":"<p>Effect tags are used to apply animations and other programmatic effects to all the characters in between the opening (i.e. <code>[EFFECT=...]</code>) and closing (i.e. <code>[END_EFFECT]</code>) tags.</p> <p>You must specify the desired effect after the <code>=</code> inside the tag. There are currently 3 in-built effects:</p> <ol> <li><code>[EFFECT=BOUNCE]</code> to make text bounce</li> <li><code>[EFFECT=WAVE]</code> to make text wave</li> <li><code>[EFFECT=JIGGLE]</code> to make text...that's right, jiggle</li> </ol> <p>If you want something more specific, take a look at the Creating Custom Effects page!</p>"},{"location":"getting-started.html#nestingcombining-tags","title":"Nesting/Combining Tags","text":"<p>Characters can be influenced by multiple different tags at the same time.</p> <p>Colours/backgrounds/effects are stored internally in a stack, so an <code>[END_...]</code> tag will simply pop the most recently set colour/background/effect off the stack.</p> <p>Colour and background tags:</p> <p>In the case of <code>[COLOUR=...]</code> and <code>[BACKGROUND=...]</code> tags, characters will use the most recently set colour. When an <code>[END_COLOUR]</code> or <code>[END_BACKGROUND]</code> tag is found, it will pop the last colour/background from the stack so all following characters will use the previously set colour/background.</p> <p>If the stack is already empty, the text will use the colour set in the theme (see Using Custom Themes for more information), and no background will be displayed.</p> <p>Try this:</p> <p><code>\"Default colour [COLOUR=#FFFF0000]RED [COLOUR=#FF00FF00]GREEN![END_COLOUR] RED again[END_COLOUR] back to default\"</code></p> <p>Effect tags:</p> <p>If a character is inside multiple <code>[EFFECT=...]</code> tags, the character will be influenced by ALL of the effects in the stack (as long as any custom effects have been written \"correctly\" to not write over the output of other effects...).</p> <p>Try this:</p> <p><code>\"No effect [EFFECT=WAVE]WAVING [EFFECT=JIGGLE]WAVING AND JIGGLING[END_EFFECT] WAVING again[END_EFFECT] back to normal\"</code></p> <p>Altogether now!</p> <p>Character backgrounds are drawn relative to the final position of the character (after effects are applied), so moving text will also move the backgrounds.</p> <p>Try this:</p> <p><code>\"Normal [EFFECT=WAVE]WAVING [BACKGROUND=#FFFF0000]WAVING AND RED BACKGROUND[END_BACKGROUND] just waving[END_EFFECT] and back to normal\"</code></p>"},{"location":"getting-started.html#next-steps","title":"Next Steps","text":"<p>Now you've got a little bit of an idea what's going on, you can explore the examples for some more advanced usage.</p> <p>You may also want to check out the following pages for more in-depth guides on customisation: 1. Using Custom Themes 2. Creating Custom Effects</p>"}]}